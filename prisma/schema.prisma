generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  status       Boolean     @default(true)
  email        String      @unique
  secretariaId String
  senha        String
  nome_civil   String
  tipo_usuario TipoUsuario
  ultimo_login DateTime?
  professor    Professor?
  aluno        Aluno?
  secretaria   Secretaria  @relation(fields: [secretariaId], references: [id])

  @@map("usuario")
}

model Secretaria {
  id                     String                 @id @default(uuid())
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  acesso_admin           Boolean
  cpf                    String?
  nome_social            String?
  usuario                Usuario[]
  solicitacao_defesa     SolicitacaoDefesa[]
  programa_pos_graduacao ProgramaPosGraduacao[]

  @@map("secretaria")
}

model Aluno {
  id                        String                @id @default(uuid())
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt
  usuario_id                String                @unique
  qualificacao              Qualificacao
  programa_pos_graduacao_id String?
  email_pessoal             String?
  cpf                       String?
  nome_social               String?
  data_de_ingresso          DateTime?
  aluno_professor           AlunoProfessor[]
  solicitacao_defesa        SolicitacaoDefesa[]
  usuario                   Usuario               @relation(fields: [usuario_id], references: [id])
  programa_pos_graduacao    ProgramaPosGraduacao? @relation(fields: [programa_pos_graduacao_id], references: [id])

  @@map("aluno")
}

model Professor {
  id                        String                      @id @default(uuid())
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  pertence_uem              Boolean                     @default(true)
  usuario_id                String                      @unique
  qualificacao              Qualificacao
  cpf                       String?
  formacao_origem           String?
  area_atuacao              String?
  titulacao                 String?
  nome_social               String?
  telefone                  String?
  programa_pos_graduacao_id String?
  aluno_professor           AlunoProfessor[]
  SolicitacaoBancaProfessor SolicitacaoBancaProfessor[]
  usuario                   Usuario                     @relation(fields: [usuario_id], references: [id])
  programa_pos_graduacao    ProgramaPosGraduacao?       @relation(fields: [programa_pos_graduacao_id], references: [id])

  @@map("professor")
}

model ProgramaPosGraduacao {
  id                String           @id @default(uuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  status            Boolean          @default(true)
  tipo              Qualificacao
  categoria         ModoApresentacao
  codigo            BigInt
  linha_de_pesquisa String
  curso             String
  cidade            String
  departamento      String?
  secretaria_id     String
  alunos            Aluno[]
  professores       Professor[]
  secretaria        Secretaria       @relation(fields: [secretaria_id], references: [id])

  @@map("programa_pos_graduacao")
}

model AlunoProfessor {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  aluno_id     String
  professor_id String
  coorientador Boolean
  aluno        Aluno     @relation(fields: [aluno_id], references: [id])
  professor    Professor @relation(fields: [professor_id], references: [id])

  @@map("aluno_professor")
}

model SolicitacaoBancaProfessor {
  id                 String              @id @default(uuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  professor_id       String
  suplente           Boolean
  copia_impressa     Boolean
  solicitacao_defesa SolicitacaoDefesa[]
  professor          Professor           @relation(fields: [professor_id], references: [id])

  @@map("solicitacao_banca_professor")
}

model SolicitacaoDefesa {
  id                   String                    @id @default(uuid())
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  modalidade_defesa    ModoApresentacao
  data_defesa          DateTime
  horario_defesa       DateTime
  secretaria_id        String
  aluno_solicitante_id String
  professor_banca_id   String
  titulo_trabalho      String
  cidade               String?
  bloco                String?
  sala                 String?
  link_remoto          String?
  tipo_defesa          TipoDefesa
  anexo                Anexo[]
  status               StatusSolicitacao         @default(PENDENTE)
  secretaria           Secretaria                @relation(fields: [secretaria_id], references: [id])
  aluno                Aluno                     @relation(fields: [aluno_solicitante_id], references: [id])
  professores_banca    SolicitacaoBancaProfessor @relation(fields: [professor_banca_id], references: [id])

  @@map("solicitacao_defesa")
}

model Anexo {
  id                    String            @id @default(uuid())
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  solicitacao_defesa_id String
  nome_arquivo          String
  hash                  String
  url                   String
  tipo                  TipoAnexo
  solicitacao_defesa    SolicitacaoDefesa @relation(fields: [solicitacao_defesa_id], references: [id])

  @@map("solicitacao_defesa_anexo")
}

enum TipoUsuario {
  PROFESSOR
  ALUNO
  SECRETARIA
}

enum Qualificacao {
  MESTRADO
  DOUTORADO
}

enum ModoApresentacao {
  PRESENCIAL
  REMOTO
  HIBRIDO
}

enum TipoDefesa {
  QUALIFICACAO_MESTRADO
  QUALIFICACAO_DOUTORADO
  DEFESA_DISSERTACAO_MESTRADO
  DEFESA_TESE_DOUTORADO
}

enum StatusSolicitacao {
  APROVADO
  REPROVADO
  PENDENTE
}

enum TipoAnexo {
  TEXTO_TRABALHO
  COMPROVANTE_PUBLICACAO
  PROPOSTA_QUALIFICACAO
  DISSERTACAO_FINAL
  TESE_FINAL
  AUTORIZACAO_ORIENTADOR
  CURRICULO_LATTES_MEMBRO_EXTERNO
  CURRICULO_LATTES_MEMBRO_ESTRANGEIRO
}
